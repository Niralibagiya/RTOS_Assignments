
GPIO1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001854  08001854  00002854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001868  08001868  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001868  08001868  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001868  08001868  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001868  08001868  00002868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800186c  0800186c  0000286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001870  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00003eb0  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f0c  20003f0c  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b2f  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c81  00000000  00000000  00006bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000390  00000000  00000000  00007840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002a6  00000000  00000000  00007bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192da  00000000  00000000  00007e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000040e1  00000000  00000000  00021150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092e50  00000000  00000000  00025231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b8081  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fa8  00000000  00000000  000b80c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000b906c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  000b908b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800183c 	.word	0x0800183c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800183c 	.word	0x0800183c

080001d0 <led_init>:
 *      Author: sunbeam
 */
#include"led.h"

void led_init(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	// enable clock for gpio D port
	RCC->AHB1ENR |= BV(GPIOD_CLK_ENB);
 80001d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000240 <led_init+0x70>)
 80001d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d8:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <led_init+0x70>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6313      	str	r3, [r2, #48]	@ 0x30

	// select mode of GPIO pins as output
	LED_GPIO->MODER |= BV(24) | BV(26) | BV(28) | BV(30);
 80001e0:	4b18      	ldr	r3, [pc, #96]	@ (8000244 <led_init+0x74>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a17      	ldr	r2, [pc, #92]	@ (8000244 <led_init+0x74>)
 80001e6:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80001ea:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER &= ~(BV(25) | BV(27) | BV(29) | BV(31));
 80001ec:	4b15      	ldr	r3, [pc, #84]	@ (8000244 <led_init+0x74>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a14      	ldr	r2, [pc, #80]	@ (8000244 <led_init+0x74>)
 80001f2:	f023 432a 	bic.w	r3, r3, #2852126720	@ 0xaa000000
 80001f6:	6013      	str	r3, [r2, #0]

	// select output type as push pull
	LED_GPIO->OTYPER &= ~(BV(12) | BV(13) | BV(14) | BV(15));
 80001f8:	4b12      	ldr	r3, [pc, #72]	@ (8000244 <led_init+0x74>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a11      	ldr	r2, [pc, #68]	@ (8000244 <led_init+0x74>)
 80001fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000202:	6053      	str	r3, [r2, #4]

	// select output speed as low
	LED_GPIO->OSPEEDR &= ~(BV(24) | BV(26) | BV(28) | BV(30));
 8000204:	4b0f      	ldr	r3, [pc, #60]	@ (8000244 <led_init+0x74>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	4a0e      	ldr	r2, [pc, #56]	@ (8000244 <led_init+0x74>)
 800020a:	f023 43aa 	bic.w	r3, r3, #1426063360	@ 0x55000000
 800020e:	6093      	str	r3, [r2, #8]
	LED_GPIO->OSPEEDR &= ~(BV(25) | BV(27) | BV(29) | BV(31));
 8000210:	4b0c      	ldr	r3, [pc, #48]	@ (8000244 <led_init+0x74>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	4a0b      	ldr	r2, [pc, #44]	@ (8000244 <led_init+0x74>)
 8000216:	f023 432a 	bic.w	r3, r3, #2852126720	@ 0xaa000000
 800021a:	6093      	str	r3, [r2, #8]

	// do not select pull up / pull down resistor
	LED_GPIO->PUPDR &= ~(BV(24) | BV(26) | BV(28) | BV(30));
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <led_init+0x74>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	4a08      	ldr	r2, [pc, #32]	@ (8000244 <led_init+0x74>)
 8000222:	f023 43aa 	bic.w	r3, r3, #1426063360	@ 0x55000000
 8000226:	60d3      	str	r3, [r2, #12]
	LED_GPIO->PUPDR &= ~(BV(25) | BV(27) | BV(29) | BV(31));
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <led_init+0x74>)
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	4a05      	ldr	r2, [pc, #20]	@ (8000244 <led_init+0x74>)
 800022e:	f023 432a 	bic.w	r3, r3, #2852126720	@ 0xaa000000
 8000232:	60d3      	str	r3, [r2, #12]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020c00 	.word	0x40020c00

08000248 <led_toggle>:
	LED_GPIO->ODR &= ~(BV(LED_GREEN) | BV(LED_ORANGE) | BV(LED_RED) | BV(LED_BLUE));
}


void led_toggle(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	LED_GPIO->ODR ^= BV(LED_GREEN) | BV(LED_ORANGE) | BV(LED_RED) | BV(LED_BLUE);
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <led_toggle+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	@ (8000264 <led_toggle+0x1c>)
 8000252:	f483 4370 	eor.w	r3, r3, #61440	@ 0xf000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <vMainTaskFunction>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void vMainTaskFunction(void * pvParam)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	while(1){
		// work
		led_toggle();
 8000270:	f7ff ffea 	bl	8000248 <led_toggle>
		vTaskDelay(1000/portTICK_RATE_MS);
 8000274:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000278:	f000 fa88 	bl	800078c <vTaskDelay>
		led_toggle();
 800027c:	bf00      	nop
 800027e:	e7f7      	b.n	8000270 <vMainTaskFunction+0x8>

08000280 <main>:
}



int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8
	led_init();
 8000286:	f7ff ffa3 	bl	80001d0 <led_init>

	xTaskCreate(vMainTaskFunction, "Aperiodic", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 800028a:	2300      	movs	r3, #0
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2304      	movs	r3, #4
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2280      	movs	r2, #128	@ 0x80
 8000296:	4904      	ldr	r1, [pc, #16]	@ (80002a8 <main+0x28>)
 8000298:	4804      	ldr	r0, [pc, #16]	@ (80002ac <main+0x2c>)
 800029a:	f000 f926 	bl	80004ea <xTaskCreate>

	vTaskStartScheduler();
 800029e:	f000 faab 	bl	80007f8 <vTaskStartScheduler>
	while(1);
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x22>
 80002a6:	bf00      	nop
 80002a8:	08001854 	.word	0x08001854
 80002ac:	08000269 	.word	0x08000269

080002b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <SystemInit+0x1c>)
 80002b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ba:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <SystemInit+0x1c>)
 80002bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 80002c4:	f000 f804 	bl	80002d0 <DWT_Init>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <DWT_Init+0x58>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a13      	ldr	r2, [pc, #76]	@ (8000328 <DWT_Init+0x58>)
 80002da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80002de:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <DWT_Init+0x58>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <DWT_Init+0x58>)
 80002e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002ea:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <DWT_Init+0x5c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a0e      	ldr	r2, [pc, #56]	@ (800032c <DWT_Init+0x5c>)
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	@ (800032c <DWT_Init+0x5c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0b      	ldr	r2, [pc, #44]	@ (800032c <DWT_Init+0x5c>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000304:	4b09      	ldr	r3, [pc, #36]	@ (800032c <DWT_Init+0x5c>)
 8000306:	2200      	movs	r2, #0
 8000308:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800030a:	bf00      	nop
    __ASM volatile ("NOP");
 800030c:	bf00      	nop
    __ASM volatile ("NOP");
 800030e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <DWT_Init+0x5c>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	bf0c      	ite	eq
 8000318:	2301      	moveq	r3, #1
 800031a:	2300      	movne	r3, #0
 800031c:	b2db      	uxtb	r3, r3
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000edf0 	.word	0xe000edf0
 800032c:	e0001000 	.word	0xe0001000

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f7ff ffbc 	bl	80002b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f001 f9f1 	bl	8001744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff8d 	bl	8000280 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000374:	08001870 	.word	0x08001870
  ldr r2, =_sbss
 8000378:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800037c:	20003f0c 	.word	0x20003f0c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>

08000382 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f103 0208 	add.w	r2, r3, #8
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800039a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f103 0208 	add.w	r2, r3, #8
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f103 0208 	add.w	r2, r3, #8
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003b6:	bf00      	nop
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr

080003c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003c2:	b480      	push	{r7}
 80003c4:	b083      	sub	sp, #12
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	689a      	ldr	r2, [r3, #8]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	601a      	str	r2, [r3, #0]
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800043a:	d103      	bne.n	8000444 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	691b      	ldr	r3, [r3, #16]
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e00c      	b.n	800045e <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3308      	adds	r3, #8
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	e002      	b.n	8000452 <vListInsert+0x2e>
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	429a      	cmp	r2, r3
 800045c:	d2f6      	bcs.n	800044c <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	685a      	ldr	r2, [r3, #4]
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	683a      	ldr	r2, [r7, #0]
 800046c:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	683a      	ldr	r2, [r7, #0]
 8000478:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	6892      	ldr	r2, [r2, #8]
 80004ac:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	6852      	ldr	r2, [r2, #4]
 80004b6:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d103      	bne.n	80004ca <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	689a      	ldr	r2, [r3, #8]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2200      	movs	r2, #0
 80004ce:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	681b      	ldr	r3, [r3, #0]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b08c      	sub	sp, #48	@ 0x30
 80004ee:	af04      	add	r7, sp, #16
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	603b      	str	r3, [r7, #0]
 80004f6:	4613      	mov	r3, r2
 80004f8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fed4 	bl	80012ac <pvPortMalloc>
 8000504:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00e      	beq.n	800052a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800050c:	20a0      	movs	r0, #160	@ 0xa0
 800050e:	f000 fecd 	bl	80012ac <pvPortMalloc>
 8000512:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000520:	e005      	b.n	800052e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8000522:	6978      	ldr	r0, [r7, #20]
 8000524:	f000 ff90 	bl	8001448 <vPortFree>
 8000528:	e001      	b.n	800052e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800052a:	2300      	movs	r3, #0
 800052c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d013      	beq.n	800055c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000534:	88fa      	ldrh	r2, [r7, #6]
 8000536:	2300      	movs	r3, #0
 8000538:	9303      	str	r3, [sp, #12]
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	9302      	str	r3, [sp, #8]
 800053e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	68b9      	ldr	r1, [r7, #8]
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f000 f80e 	bl	800056c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000550:	69f8      	ldr	r0, [r7, #28]
 8000552:	f000 f8b1 	bl	80006b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000556:	2301      	movs	r3, #1
 8000558:	61bb      	str	r3, [r7, #24]
 800055a:	e002      	b.n	8000562 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000560:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000562:	69bb      	ldr	r3, [r7, #24]
    }
 8000564:	4618      	mov	r0, r3
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800057a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800057c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000584:	3b01      	subs	r3, #1
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	f023 0307 	bic.w	r3, r3, #7
 8000592:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	f003 0307 	and.w	r3, r3, #7
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00b      	beq.n	80005b6 <prvInitialiseNewTask+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800059e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	f3bf 8f6f 	isb	sy
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01f      	beq.n	80005fc <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
 80005c0:	e012      	b.n	80005e8 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	4413      	add	r3, r2
 80005c8:	7819      	ldrb	r1, [r3, #0]
 80005ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	4413      	add	r3, r2
 80005d0:	3334      	adds	r3, #52	@ 0x34
 80005d2:	460a      	mov	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b0f      	cmp	r3, #15
 80005ec:	d9e9      	bls.n	80005c2 <prvInitialiseNewTask+0x56>
 80005ee:	e000      	b.n	80005f2 <prvInitialiseNewTask+0x86>
            {
                break;
 80005f0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80005f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80005fa:	e003      	b.n	8000604 <prvInitialiseNewTask+0x98>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80005fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000606:	2b06      	cmp	r3, #6
 8000608:	d901      	bls.n	800060e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800060a:	2306      	movs	r3, #6
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800060e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8000614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000618:	645a      	str	r2, [r3, #68]	@ 0x44
            pxNewTCB->uxMutexesHeld = 0;
 800061a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800061c:	2200      	movs	r2, #0
 800061e:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000622:	3304      	adds	r3, #4
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fecc 	bl	80003c2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800062a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800062c:	3318      	adds	r3, #24
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fec7 	bl	80003c2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000638:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800063a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800063c:	f1c3 0207 	rsb	r2, r3, #7
 8000640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000642:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800064a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800064c:	3398      	adds	r3, #152	@ 0x98
 800064e:	2204      	movs	r2, #4
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f818 	bl	8001688 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8000658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800065a:	339c      	adds	r3, #156	@ 0x9c
 800065c:	2201      	movs	r2, #1
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f001 f811 	bl	8001688 <memset>
    #if ( configUSE_NEWLIB_REENTRANT == 1 )
        {
            /* Initialise this task's Newlib reent structure.
             * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
             * for additional information. */
            _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8000666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000668:	334c      	adds	r3, #76	@ 0x4c
 800066a:	224c      	movs	r2, #76	@ 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f80a 	bl	8001688 <memset>
 8000674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000676:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <prvInitialiseNewTask+0x140>)
 8000678:	651a      	str	r2, [r3, #80]	@ 0x50
 800067a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800067c:	4a0c      	ldr	r2, [pc, #48]	@ (80006b0 <prvInitialiseNewTask+0x144>)
 800067e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000682:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <prvInitialiseNewTask+0x148>)
 8000684:	659a      	str	r2, [r3, #88]	@ 0x58
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	68f9      	ldr	r1, [r7, #12]
 800068a:	69b8      	ldr	r0, [r7, #24]
 800068c:	f000 fbf2 	bl	8000e74 <pxPortInitialiseStack>
 8000690:	4602      	mov	r2, r0
 8000692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000694:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000698:	2b00      	cmp	r3, #0
 800069a:	d002      	beq.n	80006a2 <prvInitialiseNewTask+0x136>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800069c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800069e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20003dcc 	.word	0x20003dcc
 80006b0:	20003e34 	.word	0x20003e34
 80006b4:	20003e9c 	.word	0x20003e9c

080006b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80006c0:	f000 fd0c 	bl	80010dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80006c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <prvAddNewTaskToReadyList+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <prvAddNewTaskToReadyList+0xb8>)
 80006cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <prvAddNewTaskToReadyList+0xbc>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d109      	bne.n	80006ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80006d6:	4a27      	ldr	r2, [pc, #156]	@ (8000774 <prvAddNewTaskToReadyList+0xbc>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <prvAddNewTaskToReadyList+0xb8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d110      	bne.n	8000706 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80006e4:	f000 fac0 	bl	8000c68 <prvInitialiseTaskLists>
 80006e8:	e00d      	b.n	8000706 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <prvAddNewTaskToReadyList+0xc0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <prvAddNewTaskToReadyList+0xbc>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d802      	bhi.n	8000706 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000700:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <prvAddNewTaskToReadyList+0xbc>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000706:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <prvAddNewTaskToReadyList+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a1b      	ldr	r2, [pc, #108]	@ (800077c <prvAddNewTaskToReadyList+0xc4>)
 800070e:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000714:	2201      	movs	r2, #1
 8000716:	409a      	lsls	r2, r3
 8000718:	4b19      	ldr	r3, [pc, #100]	@ (8000780 <prvAddNewTaskToReadyList+0xc8>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4313      	orrs	r3, r2
 800071e:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <prvAddNewTaskToReadyList+0xc8>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <prvAddNewTaskToReadyList+0xcc>)
 8000730:	441a      	add	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	3304      	adds	r3, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4610      	mov	r0, r2
 800073a:	f7ff fe4f 	bl	80003dc <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800073e:	f000 fcff 	bl	8001140 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000742:	4b0d      	ldr	r3, [pc, #52]	@ (8000778 <prvAddNewTaskToReadyList+0xc0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00e      	beq.n	8000768 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800074a:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <prvAddNewTaskToReadyList+0xbc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000754:	429a      	cmp	r2, r3
 8000756:	d207      	bcs.n	8000768 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000758:	4b0b      	ldr	r3, [pc, #44]	@ (8000788 <prvAddNewTaskToReadyList+0xd0>)
 800075a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	f3bf 8f4f 	dsb	sy
 8000764:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000178 	.word	0x20000178
 8000774:	20000078 	.word	0x20000078
 8000778:	20000184 	.word	0x20000184
 800077c:	20000194 	.word	0x20000194
 8000780:	20000180 	.word	0x20000180
 8000784:	2000007c 	.word	0x2000007c
 8000788:	e000ed04 	.word	0xe000ed04

0800078c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d018      	beq.n	80007d0 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <vTaskDelay+0x64>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00b      	beq.n	80007be <vTaskDelay+0x32>
        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	60bb      	str	r3, [r7, #8]
    }
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	e7fd      	b.n	80007ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80007be:	f000 f871 	bl	80008a4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80007c2:	2100      	movs	r1, #0
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f000 faef 	bl	8000da8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80007ca:	f000 f879 	bl	80008c0 <xTaskResumeAll>
 80007ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d107      	bne.n	80007e6 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <vTaskDelay+0x68>)
 80007d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	f3bf 8f4f 	dsb	sy
 80007e2:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001a0 	.word	0x200001a0
 80007f4:	e000ed04 	.word	0xe000ed04

080007f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <vTaskStartScheduler+0x88>)
 8000800:	9301      	str	r3, [sp, #4]
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2300      	movs	r3, #0
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	491e      	ldr	r1, [pc, #120]	@ (8000884 <vTaskStartScheduler+0x8c>)
 800080c:	481e      	ldr	r0, [pc, #120]	@ (8000888 <vTaskStartScheduler+0x90>)
 800080e:	f7ff fe6c 	bl	80004ea <xTaskCreate>
 8000812:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d11b      	bne.n	8000852 <vTaskStartScheduler+0x5a>
        __asm volatile
 800081a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800081e:	f383 8811 	msr	BASEPRI, r3
 8000822:	f3bf 8f6f 	isb	sy
 8000826:	f3bf 8f4f 	dsb	sy
 800082a:	60bb      	str	r3, [r7, #8]
    }
 800082c:	bf00      	nop
            {
                /* Switch Newlib's _impure_ptr variable to point to the _reent
                 * structure specific to the task that will run first.
                 * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <vTaskStartScheduler+0x94>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	334c      	adds	r3, #76	@ 0x4c
 8000834:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <vTaskStartScheduler+0x98>)
 8000836:	6013      	str	r3, [r2, #0]
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <vTaskStartScheduler+0x9c>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800083e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <vTaskStartScheduler+0xa0>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <vTaskStartScheduler+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800084c:	f000 fba2 	bl	8000f94 <xPortStartScheduler>
 8000850:	e00f      	b.n	8000872 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000858:	d10b      	bne.n	8000872 <vTaskStartScheduler+0x7a>
        __asm volatile
 800085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800085e:	f383 8811 	msr	BASEPRI, r3
 8000862:	f3bf 8f6f 	isb	sy
 8000866:	f3bf 8f4f 	dsb	sy
 800086a:	607b      	str	r3, [r7, #4]
    }
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <vTaskStartScheduler+0x76>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <vTaskStartScheduler+0xa8>)
 8000874:	681b      	ldr	r3, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000019c 	.word	0x2000019c
 8000884:	08001860 	.word	0x08001860
 8000888:	08000c39 	.word	0x08000c39
 800088c:	20000078 	.word	0x20000078
 8000890:	2000000c 	.word	0x2000000c
 8000894:	20000198 	.word	0x20000198
 8000898:	20000184 	.word	0x20000184
 800089c:	2000017c 	.word	0x2000017c
 80008a0:	20000004 	.word	0x20000004

080008a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80008a8:	4b04      	ldr	r3, [pc, #16]	@ (80008bc <vTaskSuspendAll+0x18>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4a03      	ldr	r2, [pc, #12]	@ (80008bc <vTaskSuspendAll+0x18>)
 80008b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	200001a0 	.word	0x200001a0

080008c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80008ce:	4b42      	ldr	r3, [pc, #264]	@ (80009d8 <xTaskResumeAll+0x118>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10b      	bne.n	80008ee <xTaskResumeAll+0x2e>
        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	603b      	str	r3, [r7, #0]
    }
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	e7fd      	b.n	80008ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80008ee:	f000 fbf5 	bl	80010dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <xTaskResumeAll+0x118>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a37      	ldr	r2, [pc, #220]	@ (80009d8 <xTaskResumeAll+0x118>)
 80008fa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80008fc:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <xTaskResumeAll+0x118>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d161      	bne.n	80009c8 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000904:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <xTaskResumeAll+0x11c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d05d      	beq.n	80009c8 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800090c:	e02e      	b.n	800096c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800090e:	4b34      	ldr	r3, [pc, #208]	@ (80009e0 <xTaskResumeAll+0x120>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3318      	adds	r3, #24
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fdbb 	bl	8000496 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3304      	adds	r3, #4
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdb6 	bl	8000496 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	2201      	movs	r2, #1
 8000930:	409a      	lsls	r2, r3
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <xTaskResumeAll+0x124>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4313      	orrs	r3, r2
 8000938:	4a2a      	ldr	r2, [pc, #168]	@ (80009e4 <xTaskResumeAll+0x124>)
 800093a:	6013      	str	r3, [r2, #0]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4a27      	ldr	r2, [pc, #156]	@ (80009e8 <xTaskResumeAll+0x128>)
 800094a:	441a      	add	r2, r3
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3304      	adds	r3, #4
 8000950:	4619      	mov	r1, r3
 8000952:	4610      	mov	r0, r2
 8000954:	f7ff fd42 	bl	80003dc <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800095c:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <xTaskResumeAll+0x12c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000962:	429a      	cmp	r2, r3
 8000964:	d302      	bcc.n	800096c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <xTaskResumeAll+0x130>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800096c:	4b1c      	ldr	r3, [pc, #112]	@ (80009e0 <xTaskResumeAll+0x120>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1cc      	bne.n	800090e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800097a:	f000 f9f9 	bl	8000d70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800097e:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <xTaskResumeAll+0x134>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d010      	beq.n	80009ac <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800098a:	f000 f837 	bl	80009fc <xTaskIncrementTick>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <xTaskResumeAll+0x130>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3b01      	subs	r3, #1
 800099e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1f1      	bne.n	800098a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <xTaskResumeAll+0x134>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80009ac:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <xTaskResumeAll+0x130>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <xTaskResumeAll+0x138>)
 80009ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80009c8:	f000 fbba 	bl	8001140 <vPortExitCritical>

    return xAlreadyYielded;
 80009cc:	68bb      	ldr	r3, [r7, #8]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200001a0 	.word	0x200001a0
 80009dc:	20000178 	.word	0x20000178
 80009e0:	20000138 	.word	0x20000138
 80009e4:	20000180 	.word	0x20000180
 80009e8:	2000007c 	.word	0x2000007c
 80009ec:	20000078 	.word	0x20000078
 80009f0:	2000018c 	.word	0x2000018c
 80009f4:	20000188 	.word	0x20000188
 80009f8:	e000ed04 	.word	0xe000ed04

080009fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a06:	4b4f      	ldr	r3, [pc, #316]	@ (8000b44 <xTaskIncrementTick+0x148>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 808f 	bne.w	8000b2e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a10:	4b4d      	ldr	r3, [pc, #308]	@ (8000b48 <xTaskIncrementTick+0x14c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000a18:	4a4b      	ldr	r2, [pc, #300]	@ (8000b48 <xTaskIncrementTick+0x14c>)
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d121      	bne.n	8000a68 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000a24:	4b49      	ldr	r3, [pc, #292]	@ (8000b4c <xTaskIncrementTick+0x150>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00b      	beq.n	8000a46 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a32:	f383 8811 	msr	BASEPRI, r3
 8000a36:	f3bf 8f6f 	isb	sy
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	603b      	str	r3, [r7, #0]
    }
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	e7fd      	b.n	8000a42 <xTaskIncrementTick+0x46>
 8000a46:	4b41      	ldr	r3, [pc, #260]	@ (8000b4c <xTaskIncrementTick+0x150>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	4b40      	ldr	r3, [pc, #256]	@ (8000b50 <xTaskIncrementTick+0x154>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a3e      	ldr	r2, [pc, #248]	@ (8000b4c <xTaskIncrementTick+0x150>)
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <xTaskIncrementTick+0x154>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b54 <xTaskIncrementTick+0x158>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a3c      	ldr	r2, [pc, #240]	@ (8000b54 <xTaskIncrementTick+0x158>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	f000 f984 	bl	8000d70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000a68:	4b3b      	ldr	r3, [pc, #236]	@ (8000b58 <xTaskIncrementTick+0x15c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d348      	bcc.n	8000b04 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a72:	4b36      	ldr	r3, [pc, #216]	@ (8000b4c <xTaskIncrementTick+0x150>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a7c:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <xTaskIncrementTick+0x15c>)
 8000a7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a82:	601a      	str	r2, [r3, #0]
                    break;
 8000a84:	e03e      	b.n	8000b04 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a86:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <xTaskIncrementTick+0x150>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d203      	bcs.n	8000aa6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b58 <xTaskIncrementTick+0x15c>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000aa4:	e02e      	b.n	8000b04 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcf3 	bl	8000496 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d004      	beq.n	8000ac2 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	3318      	adds	r3, #24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fcea 	bl	8000496 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <xTaskIncrementTick+0x160>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <xTaskIncrementTick+0x160>)
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8000b60 <xTaskIncrementTick+0x164>)
 8000ae2:	441a      	add	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4610      	mov	r0, r2
 8000aec:	f7ff fc76 	bl	80003dc <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <xTaskIncrementTick+0x168>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d3b9      	bcc.n	8000a72 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b02:	e7b6      	b.n	8000a72 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <xTaskIncrementTick+0x168>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b0a:	4915      	ldr	r1, [pc, #84]	@ (8000b60 <xTaskIncrementTick+0x164>)
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d901      	bls.n	8000b20 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <xTaskIncrementTick+0x16c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d007      	beq.n	8000b38 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e004      	b.n	8000b38 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <xTaskIncrementTick+0x170>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <xTaskIncrementTick+0x170>)
 8000b36:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000b38:	697b      	ldr	r3, [r7, #20]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001a0 	.word	0x200001a0
 8000b48:	2000017c 	.word	0x2000017c
 8000b4c:	20000130 	.word	0x20000130
 8000b50:	20000134 	.word	0x20000134
 8000b54:	20000190 	.word	0x20000190
 8000b58:	20000198 	.word	0x20000198
 8000b5c:	20000180 	.word	0x20000180
 8000b60:	2000007c 	.word	0x2000007c
 8000b64:	20000078 	.word	0x20000078
 8000b68:	2000018c 	.word	0x2000018c
 8000b6c:	20000188 	.word	0x20000188

08000b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000b76:	4b2a      	ldr	r3, [pc, #168]	@ (8000c20 <vTaskSwitchContext+0xb0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <vTaskSwitchContext+0xb4>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000b84:	e045      	b.n	8000c12 <vTaskSwitchContext+0xa2>
        xYieldPending = pdFALSE;
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <vTaskSwitchContext+0xb4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b8c:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <vTaskSwitchContext+0xb8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8000b9a:	7afb      	ldrb	r3, [r7, #11]
 8000b9c:	f1c3 031f 	rsb	r3, r3, #31
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	4922      	ldr	r1, [pc, #136]	@ (8000c2c <vTaskSwitchContext+0xbc>)
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	440b      	add	r3, r1
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <vTaskSwitchContext+0x5e>
        __asm volatile
 8000bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	607b      	str	r3, [r7, #4]
    }
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	e7fd      	b.n	8000bca <vTaskSwitchContext+0x5a>
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <vTaskSwitchContext+0xbc>)
 8000bda:	4413      	add	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d104      	bne.n	8000bfe <vTaskSwitchContext+0x8e>
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <vTaskSwitchContext+0xc0>)
 8000c06:	6013      	str	r3, [r2, #0]
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <vTaskSwitchContext+0xc0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	334c      	adds	r3, #76	@ 0x4c
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <vTaskSwitchContext+0xc4>)
 8000c10:	6013      	str	r3, [r2, #0]
}
 8000c12:	bf00      	nop
 8000c14:	371c      	adds	r7, #28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200001a0 	.word	0x200001a0
 8000c24:	2000018c 	.word	0x2000018c
 8000c28:	20000180 	.word	0x20000180
 8000c2c:	2000007c 	.word	0x2000007c
 8000c30:	20000078 	.word	0x20000078
 8000c34:	2000000c 	.word	0x2000000c

08000c38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000c40:	f000 f852 	bl	8000ce8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <prvIdleTask+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d9f9      	bls.n	8000c40 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <prvIdleTask+0x2c>)
 8000c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000c5c:	e7f0      	b.n	8000c40 <prvIdleTask+0x8>
 8000c5e:	bf00      	nop
 8000c60:	2000007c 	.word	0x2000007c
 8000c64:	e000ed04 	.word	0xe000ed04

08000c68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	e00c      	b.n	8000c8e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <prvInitialiseTaskLists+0x60>)
 8000c80:	4413      	add	r3, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fb7d 	bl	8000382 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d9ef      	bls.n	8000c74 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <prvInitialiseTaskLists+0x64>)
 8000c96:	f7ff fb74 	bl	8000382 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <prvInitialiseTaskLists+0x68>)
 8000c9c:	f7ff fb71 	bl	8000382 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <prvInitialiseTaskLists+0x6c>)
 8000ca2:	f7ff fb6e 	bl	8000382 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <prvInitialiseTaskLists+0x70>)
 8000ca8:	f7ff fb6b 	bl	8000382 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <prvInitialiseTaskLists+0x74>)
 8000cae:	f7ff fb68 	bl	8000382 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <prvInitialiseTaskLists+0x78>)
 8000cb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <prvInitialiseTaskLists+0x64>)
 8000cb6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <prvInitialiseTaskLists+0x7c>)
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <prvInitialiseTaskLists+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000007c 	.word	0x2000007c
 8000ccc:	20000108 	.word	0x20000108
 8000cd0:	2000011c 	.word	0x2000011c
 8000cd4:	20000138 	.word	0x20000138
 8000cd8:	2000014c 	.word	0x2000014c
 8000cdc:	20000164 	.word	0x20000164
 8000ce0:	20000130 	.word	0x20000130
 8000ce4:	20000134 	.word	0x20000134

08000ce8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000cee:	e019      	b.n	8000d24 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8000cf0:	f000 f9f4 	bl	80010dc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <prvCheckTasksWaitingTermination+0x50>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fbc8 	bl	8000496 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <prvCheckTasksWaitingTermination+0x54>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <prvCheckTasksWaitingTermination+0x54>)
 8000d0e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <prvCheckTasksWaitingTermination+0x58>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <prvCheckTasksWaitingTermination+0x58>)
 8000d18:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8000d1a:	f000 fa11 	bl	8001140 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f810 	bl	8000d44 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <prvCheckTasksWaitingTermination+0x58>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e1      	bne.n	8000cf0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000014c 	.word	0x2000014c
 8000d3c:	20000178 	.word	0x20000178
 8000d40:	20000160 	.word	0x20000160

08000d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
         * to the task to free any memory allocated at the application level.
         * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
         * for additional information. */
        #if ( configUSE_NEWLIB_REENTRANT == 1 )
            {
                _reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	334c      	adds	r3, #76	@ 0x4c
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fca1 	bl	8001698 <_reclaim_reent>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fb74 	bl	8001448 <vPortFree>
                vPortFree( pxTCB );
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 fb71 	bl	8001448 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d74:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <prvResetNextTaskUnblockTime+0x30>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d104      	bne.n	8000d88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <prvResetNextTaskUnblockTime+0x34>)
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000d86:	e005      	b.n	8000d94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <prvResetNextTaskUnblockTime+0x30>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <prvResetNextTaskUnblockTime+0x34>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000130 	.word	0x20000130
 8000da4:	20000198 	.word	0x20000198

08000da8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fb69 	bl	8000496 <uxListRemove>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10b      	bne.n	8000de2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8000dca:	4b24      	ldr	r3, [pc, #144]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43da      	mvns	r2, r3
 8000dd8:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8000de0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000de8:	d10a      	bne.n	8000e00 <prvAddCurrentTaskToDelayedList+0x58>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000df0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3304      	adds	r3, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	481a      	ldr	r0, [pc, #104]	@ (8000e64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8000dfa:	f7ff faef 	bl	80003dc <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000dfe:	e026      	b.n	8000e4e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d209      	bcs.n	8000e2c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e18:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3304      	adds	r3, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f7ff fafd 	bl	8000424 <vListInsert>
}
 8000e2a:	e010      	b.n	8000e4e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3304      	adds	r3, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f7ff faf3 	bl	8000424 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d202      	bcs.n	8000e4e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8000e48:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000017c 	.word	0x2000017c
 8000e5c:	20000078 	.word	0x20000078
 8000e60:	20000180 	.word	0x20000180
 8000e64:	20000164 	.word	0x20000164
 8000e68:	20000134 	.word	0x20000134
 8000e6c:	20000130 	.word	0x20000130
 8000e70:	20000198 	.word	0x20000198

08000e74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3b04      	subs	r3, #4
 8000e84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	3b04      	subs	r3, #4
 8000e92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f023 0201 	bic.w	r2, r3, #1
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3b04      	subs	r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed8 <pxPortInitialiseStack+0x64>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b14      	subs	r3, #20
 8000eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3b04      	subs	r3, #4
 8000eba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f06f 0202 	mvn.w	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	3b20      	subs	r3, #32
 8000ec8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	08000edd 	.word	0x08000edd

08000edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000ee6:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <prvTaskExitError+0x58>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000eee:	d00b      	beq.n	8000f08 <prvTaskExitError+0x2c>
        __asm volatile
 8000ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef4:	f383 8811 	msr	BASEPRI, r3
 8000ef8:	f3bf 8f6f 	isb	sy
 8000efc:	f3bf 8f4f 	dsb	sy
 8000f00:	60fb      	str	r3, [r7, #12]
    }
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <prvTaskExitError+0x28>
        __asm volatile
 8000f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f0c:	f383 8811 	msr	BASEPRI, r3
 8000f10:	f3bf 8f6f 	isb	sy
 8000f14:	f3bf 8f4f 	dsb	sy
 8000f18:	60bb      	str	r3, [r7, #8]
    }
 8000f1a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000f1c:	bf00      	nop
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0fc      	beq.n	8000f1e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
	...

08000f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <pxCurrentTCBConst2>)
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	6808      	ldr	r0, [r1, #0]
 8000f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f4a:	f380 8809 	msr	PSP, r0
 8000f4e:	f3bf 8f6f 	isb	sy
 8000f52:	f04f 0000 	mov.w	r0, #0
 8000f56:	f380 8811 	msr	BASEPRI, r0
 8000f5a:	4770      	bx	lr
 8000f5c:	f3af 8000 	nop.w

08000f60 <pxCurrentTCBConst2>:
 8000f60:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop

08000f68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000f68:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <prvPortStartFirstTask+0x24>)
 8000f6a:	6800      	ldr	r0, [r0, #0]
 8000f6c:	6800      	ldr	r0, [r0, #0]
 8000f6e:	f380 8808 	msr	MSP, r0
 8000f72:	f04f 0000 	mov.w	r0, #0
 8000f76:	f380 8814 	msr	CONTROL, r0
 8000f7a:	b662      	cpsie	i
 8000f7c:	b661      	cpsie	f
 8000f7e:	f3bf 8f4f 	dsb	sy
 8000f82:	f3bf 8f6f 	isb	sy
 8000f86:	df00      	svc	0
 8000f88:	bf00      	nop
 8000f8a:	0000      	.short	0x0000
 8000f8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop

08000f94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000f9a:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <xPortStartScheduler+0x124>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a47      	ldr	r2, [pc, #284]	@ (80010bc <xPortStartScheduler+0x128>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d10b      	bne.n	8000fbc <xPortStartScheduler+0x28>
        __asm volatile
 8000fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fa8:	f383 8811 	msr	BASEPRI, r3
 8000fac:	f3bf 8f6f 	isb	sy
 8000fb0:	f3bf 8f4f 	dsb	sy
 8000fb4:	613b      	str	r3, [r7, #16]
    }
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80010b8 <xPortStartScheduler+0x124>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80010c0 <xPortStartScheduler+0x12c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10b      	bne.n	8000fde <xPortStartScheduler+0x4a>
        __asm volatile
 8000fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	60fb      	str	r3, [r7, #12]
    }
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	e7fd      	b.n	8000fda <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000fde:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <xPortStartScheduler+0x130>)
 8000fe0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	22ff      	movs	r2, #255	@ 0xff
 8000fee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <xPortStartScheduler+0x134>)
 8001004:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001006:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <xPortStartScheduler+0x138>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800100c:	e009      	b.n	8001022 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800100e:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <xPortStartScheduler+0x138>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a2d      	ldr	r2, [pc, #180]	@ (80010cc <xPortStartScheduler+0x138>)
 8001016:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001022:	78fb      	ldrb	r3, [r7, #3]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800102a:	2b80      	cmp	r3, #128	@ 0x80
 800102c:	d0ef      	beq.n	800100e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <xPortStartScheduler+0x138>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	d00b      	beq.n	8001052 <xPortStartScheduler+0xbe>
        __asm volatile
 800103a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	60bb      	str	r3, [r7, #8]
    }
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	e7fd      	b.n	800104e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001052:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <xPortStartScheduler+0x138>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <xPortStartScheduler+0x138>)
 800105a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <xPortStartScheduler+0x138>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001064:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <xPortStartScheduler+0x138>)
 8001066:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <xPortStartScheduler+0x13c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <xPortStartScheduler+0x13c>)
 8001076:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800107a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <xPortStartScheduler+0x13c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <xPortStartScheduler+0x13c>)
 8001082:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001086:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001088:	f000 f8e0 	bl	800124c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <xPortStartScheduler+0x140>)
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001092:	f000 f8ff 	bl	8001294 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001096:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <xPortStartScheduler+0x144>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <xPortStartScheduler+0x144>)
 800109c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80010a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80010a2:	f7ff ff61 	bl	8000f68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80010a6:	f7ff fd63 	bl	8000b70 <vTaskSwitchContext>
    prvTaskExitError();
 80010aa:	f7ff ff17 	bl	8000edc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	410fc271 	.word	0x410fc271
 80010c0:	410fc270 	.word	0x410fc270
 80010c4:	e000e400 	.word	0xe000e400
 80010c8:	200001a4 	.word	0x200001a4
 80010cc:	200001a8 	.word	0x200001a8
 80010d0:	e000ed20 	.word	0xe000ed20
 80010d4:	20000008 	.word	0x20000008
 80010d8:	e000ef34 	.word	0xe000ef34

080010dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
        __asm volatile
 80010e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010e6:	f383 8811 	msr	BASEPRI, r3
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	f3bf 8f4f 	dsb	sy
 80010f2:	607b      	str	r3, [r7, #4]
    }
 80010f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <vPortEnterCritical+0x5c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <vPortEnterCritical+0x5c>)
 80010fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <vPortEnterCritical+0x5c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d110      	bne.n	800112a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <vPortEnterCritical+0x60>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <vPortEnterCritical+0x4e>
        __asm volatile
 8001112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	f3bf 8f6f 	isb	sy
 800111e:	f3bf 8f4f 	dsb	sy
 8001122:	603b      	str	r3, [r7, #0]
    }
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	e7fd      	b.n	8001126 <vPortEnterCritical+0x4a>
    }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	e000ed04 	.word	0xe000ed04

08001140 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <vPortExitCritical+0x50>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10b      	bne.n	8001166 <vPortExitCritical+0x26>
        __asm volatile
 800114e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001152:	f383 8811 	msr	BASEPRI, r3
 8001156:	f3bf 8f6f 	isb	sy
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	607b      	str	r3, [r7, #4]
    }
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	e7fd      	b.n	8001162 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <vPortExitCritical+0x50>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3b01      	subs	r3, #1
 800116c:	4a08      	ldr	r2, [pc, #32]	@ (8001190 <vPortExitCritical+0x50>)
 800116e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001170:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <vPortExitCritical+0x50>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d105      	bne.n	8001184 <vPortExitCritical+0x44>
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001182:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000008 	.word	0x20000008
	...

080011a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80011a0:	f3ef 8009 	mrs	r0, PSP
 80011a4:	f3bf 8f6f 	isb	sy
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <pxCurrentTCBConst>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f01e 0f10 	tst.w	lr, #16
 80011b0:	bf08      	it	eq
 80011b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80011b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011ba:	6010      	str	r0, [r2, #0]
 80011bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80011c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80011c4:	f380 8811 	msr	BASEPRI, r0
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	f3bf 8f6f 	isb	sy
 80011d0:	f7ff fcce 	bl	8000b70 <vTaskSwitchContext>
 80011d4:	f04f 0000 	mov.w	r0, #0
 80011d8:	f380 8811 	msr	BASEPRI, r0
 80011dc:	bc09      	pop	{r0, r3}
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	6808      	ldr	r0, [r1, #0]
 80011e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e6:	f01e 0f10 	tst.w	lr, #16
 80011ea:	bf08      	it	eq
 80011ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80011f0:	f380 8809 	msr	PSP, r0
 80011f4:	f3bf 8f6f 	isb	sy
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w

08001200 <pxCurrentTCBConst>:
 8001200:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop

08001208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
        __asm volatile
 800120e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001212:	f383 8811 	msr	BASEPRI, r3
 8001216:	f3bf 8f6f 	isb	sy
 800121a:	f3bf 8f4f 	dsb	sy
 800121e:	607b      	str	r3, [r7, #4]
    }
 8001220:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001222:	f7ff fbeb 	bl	80009fc <xTaskIncrementTick>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <SysTick_Handler+0x40>)
 800122e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f383 8811 	msr	BASEPRI, r3
    }
 800123e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	e000ed04 	.word	0xe000ed04

0800124c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <vPortSetupTimerInterrupt+0x34>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <vPortSetupTimerInterrupt+0x38>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <vPortSetupTimerInterrupt+0x3c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <vPortSetupTimerInterrupt+0x40>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	4a09      	ldr	r2, [pc, #36]	@ (8001290 <vPortSetupTimerInterrupt+0x44>)
 800126a:	3b01      	subs	r3, #1
 800126c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <vPortSetupTimerInterrupt+0x34>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010
 8001284:	e000e018 	.word	0xe000e018
 8001288:	20000000 	.word	0x20000000
 800128c:	10624dd3 	.word	0x10624dd3
 8001290:	e000e014 	.word	0xe000e014

08001294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80012a4 <vPortEnableVFP+0x10>
 8001298:	6801      	ldr	r1, [r0, #0]
 800129a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800129e:	6001      	str	r1, [r0, #0]
 80012a0:	4770      	bx	lr
 80012a2:	0000      	.short	0x0000
 80012a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop

080012ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80012b8:	f7ff faf4 	bl	80008a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80012bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <pvPortMalloc+0x184>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80012c4:	f000 f924 	bl	8001510 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80012c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001434 <pvPortMalloc+0x188>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f040 8095 	bne.w	8001400 <pvPortMalloc+0x154>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01e      	beq.n	800131a <pvPortMalloc+0x6e>
            {
                xWantedSize += xHeapStructSize;
 80012dc:	2208      	movs	r2, #8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <pvPortMalloc+0x6e>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 80012f4:	3308      	adds	r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00b      	beq.n	800131a <pvPortMalloc+0x6e>
        __asm volatile
 8001302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	617b      	str	r3, [r7, #20]
    }
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	e7fd      	b.n	8001316 <pvPortMalloc+0x6a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d06f      	beq.n	8001400 <pvPortMalloc+0x154>
 8001320:	4b45      	ldr	r3, [pc, #276]	@ (8001438 <pvPortMalloc+0x18c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	429a      	cmp	r2, r3
 8001328:	d86a      	bhi.n	8001400 <pvPortMalloc+0x154>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 800132a:	4b44      	ldr	r3, [pc, #272]	@ (800143c <pvPortMalloc+0x190>)
 800132c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800132e:	4b43      	ldr	r3, [pc, #268]	@ (800143c <pvPortMalloc+0x190>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001334:	e004      	b.n	8001340 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d903      	bls.n	8001352 <pvPortMalloc+0xa6>
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f1      	bne.n	8001336 <pvPortMalloc+0x8a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8001352:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <pvPortMalloc+0x184>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001358:	429a      	cmp	r2, r3
 800135a:	d051      	beq.n	8001400 <pvPortMalloc+0x154>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2208      	movs	r2, #8
 8001362:	4413      	add	r3, r2
 8001364:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad2      	subs	r2, r2, r3
 8001376:	2308      	movs	r3, #8
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	429a      	cmp	r2, r3
 800137c:	d920      	bls.n	80013c0 <pvPortMalloc+0x114>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800137e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <pvPortMalloc+0xfc>
        __asm volatile
 8001390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001394:	f383 8811 	msr	BASEPRI, r3
 8001398:	f3bf 8f6f 	isb	sy
 800139c:	f3bf 8f4f 	dsb	sy
 80013a0:	613b      	str	r3, [r7, #16]
    }
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <pvPortMalloc+0xf8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	1ad2      	subs	r2, r2, r3
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80013ba:	69b8      	ldr	r0, [r7, #24]
 80013bc:	f000 f90a 	bl	80015d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <pvPortMalloc+0x18c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001438 <pvPortMalloc+0x18c>)
 80013cc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <pvPortMalloc+0x18c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <pvPortMalloc+0x194>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d203      	bcs.n	80013e2 <pvPortMalloc+0x136>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <pvPortMalloc+0x18c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <pvPortMalloc+0x194>)
 80013e0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <pvPortMalloc+0x188>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ee:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <pvPortMalloc+0x198>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <pvPortMalloc+0x198>)
 80013fe:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001400:	f7ff fa5e 	bl	80008c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00b      	beq.n	8001426 <pvPortMalloc+0x17a>
        __asm volatile
 800140e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	60fb      	str	r3, [r7, #12]
    }
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	e7fd      	b.n	8001422 <pvPortMalloc+0x176>
    return pvReturn;
 8001426:	69fb      	ldr	r3, [r7, #28]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20003db4 	.word	0x20003db4
 8001434:	20003dc8 	.word	0x20003dc8
 8001438:	20003db8 	.word	0x20003db8
 800143c:	20003dac 	.word	0x20003dac
 8001440:	20003dbc 	.word	0x20003dbc
 8001444:	20003dc0 	.word	0x20003dc0

08001448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d04f      	beq.n	80014fa <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800145a:	2308      	movs	r3, #8
 800145c:	425b      	negs	r3, r3
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <vPortFree+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10b      	bne.n	800148e <vPortFree+0x46>
        __asm volatile
 8001476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	60fb      	str	r3, [r7, #12]
    }
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	e7fd      	b.n	800148a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <vPortFree+0x66>
        __asm volatile
 8001496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149a:	f383 8811 	msr	BASEPRI, r3
 800149e:	f3bf 8f6f 	isb	sy
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	60bb      	str	r3, [r7, #8]
    }
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	e7fd      	b.n	80014aa <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <vPortFree+0xbc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01e      	beq.n	80014fa <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11a      	bne.n	80014fa <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <vPortFree+0xbc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80014d4:	f7ff f9e6 	bl	80008a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <vPortFree+0xc0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a09      	ldr	r2, [pc, #36]	@ (8001508 <vPortFree+0xc0>)
 80014e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014e6:	6938      	ldr	r0, [r7, #16]
 80014e8:	f000 f874 	bl	80015d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <vPortFree+0xc4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a06      	ldr	r2, [pc, #24]	@ (800150c <vPortFree+0xc4>)
 80014f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80014f6:	f7ff f9e3 	bl	80008c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20003dc8 	.word	0x20003dc8
 8001508:	20003db8 	.word	0x20003db8
 800150c:	20003dc4 	.word	0x20003dc4

08001510 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001516:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800151a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <prvHeapInit+0xac>)
 800151e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3307      	adds	r3, #7
 800152e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f023 0307 	bic.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <prvHeapInit+0xac>)
 8001540:	4413      	add	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001548:	4a1d      	ldr	r2, [pc, #116]	@ (80015c0 <prvHeapInit+0xb0>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800154e:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <prvHeapInit+0xb0>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800155c:	2208      	movs	r2, #8
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f023 0307 	bic.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <prvHeapInit+0xb4>)
 8001570:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <prvHeapInit+0xb4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <prvHeapInit+0xb4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <prvHeapInit+0xb4>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <prvHeapInit+0xb8>)
 800159e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <prvHeapInit+0xbc>)
 80015a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <prvHeapInit+0xc0>)
 80015aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200001ac 	.word	0x200001ac
 80015c0:	20003dac 	.word	0x20003dac
 80015c4:	20003db4 	.word	0x20003db4
 80015c8:	20003dbc 	.word	0x20003dbc
 80015cc:	20003db8 	.word	0x20003db8
 80015d0:	20003dc8 	.word	0x20003dc8

080015d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80015dc:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <prvInsertBlockIntoFreeList+0xac>)
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e002      	b.n	80015e8 <prvInsertBlockIntoFreeList+0x14>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d8f7      	bhi.n	80015e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	4413      	add	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	d108      	bne.n	8001616 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	441a      	add	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	441a      	add	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d118      	bne.n	800165c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <prvInsertBlockIntoFreeList+0xb0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d00d      	beq.n	8001652 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	441a      	add	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e008      	b.n	8001664 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <prvInsertBlockIntoFreeList+0xb0>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	e003      	b.n	8001664 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d002      	beq.n	8001672 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20003dac 	.word	0x20003dac
 8001684:	20003db4 	.word	0x20003db4

08001688 <memset>:
 8001688:	4402      	add	r2, r0
 800168a:	4603      	mov	r3, r0
 800168c:	4293      	cmp	r3, r2
 800168e:	d100      	bne.n	8001692 <memset+0xa>
 8001690:	4770      	bx	lr
 8001692:	f803 1b01 	strb.w	r1, [r3], #1
 8001696:	e7f9      	b.n	800168c <memset+0x4>

08001698 <_reclaim_reent>:
 8001698:	4b29      	ldr	r3, [pc, #164]	@ (8001740 <_reclaim_reent+0xa8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4283      	cmp	r3, r0
 800169e:	b570      	push	{r4, r5, r6, lr}
 80016a0:	4604      	mov	r4, r0
 80016a2:	d04b      	beq.n	800173c <_reclaim_reent+0xa4>
 80016a4:	69c3      	ldr	r3, [r0, #28]
 80016a6:	b1ab      	cbz	r3, 80016d4 <_reclaim_reent+0x3c>
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	b16b      	cbz	r3, 80016c8 <_reclaim_reent+0x30>
 80016ac:	2500      	movs	r5, #0
 80016ae:	69e3      	ldr	r3, [r4, #28]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	5959      	ldr	r1, [r3, r5]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d13b      	bne.n	8001730 <_reclaim_reent+0x98>
 80016b8:	3504      	adds	r5, #4
 80016ba:	2d80      	cmp	r5, #128	@ 0x80
 80016bc:	d1f7      	bne.n	80016ae <_reclaim_reent+0x16>
 80016be:	69e3      	ldr	r3, [r4, #28]
 80016c0:	4620      	mov	r0, r4
 80016c2:	68d9      	ldr	r1, [r3, #12]
 80016c4:	f000 f864 	bl	8001790 <_free_r>
 80016c8:	69e3      	ldr	r3, [r4, #28]
 80016ca:	6819      	ldr	r1, [r3, #0]
 80016cc:	b111      	cbz	r1, 80016d4 <_reclaim_reent+0x3c>
 80016ce:	4620      	mov	r0, r4
 80016d0:	f000 f85e 	bl	8001790 <_free_r>
 80016d4:	6961      	ldr	r1, [r4, #20]
 80016d6:	b111      	cbz	r1, 80016de <_reclaim_reent+0x46>
 80016d8:	4620      	mov	r0, r4
 80016da:	f000 f859 	bl	8001790 <_free_r>
 80016de:	69e1      	ldr	r1, [r4, #28]
 80016e0:	b111      	cbz	r1, 80016e8 <_reclaim_reent+0x50>
 80016e2:	4620      	mov	r0, r4
 80016e4:	f000 f854 	bl	8001790 <_free_r>
 80016e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80016ea:	b111      	cbz	r1, 80016f2 <_reclaim_reent+0x5a>
 80016ec:	4620      	mov	r0, r4
 80016ee:	f000 f84f 	bl	8001790 <_free_r>
 80016f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016f4:	b111      	cbz	r1, 80016fc <_reclaim_reent+0x64>
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 f84a 	bl	8001790 <_free_r>
 80016fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80016fe:	b111      	cbz	r1, 8001706 <_reclaim_reent+0x6e>
 8001700:	4620      	mov	r0, r4
 8001702:	f000 f845 	bl	8001790 <_free_r>
 8001706:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001708:	b111      	cbz	r1, 8001710 <_reclaim_reent+0x78>
 800170a:	4620      	mov	r0, r4
 800170c:	f000 f840 	bl	8001790 <_free_r>
 8001710:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8001712:	b111      	cbz	r1, 800171a <_reclaim_reent+0x82>
 8001714:	4620      	mov	r0, r4
 8001716:	f000 f83b 	bl	8001790 <_free_r>
 800171a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800171c:	b111      	cbz	r1, 8001724 <_reclaim_reent+0x8c>
 800171e:	4620      	mov	r0, r4
 8001720:	f000 f836 	bl	8001790 <_free_r>
 8001724:	6a23      	ldr	r3, [r4, #32]
 8001726:	b14b      	cbz	r3, 800173c <_reclaim_reent+0xa4>
 8001728:	4620      	mov	r0, r4
 800172a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800172e:	4718      	bx	r3
 8001730:	680e      	ldr	r6, [r1, #0]
 8001732:	4620      	mov	r0, r4
 8001734:	f000 f82c 	bl	8001790 <_free_r>
 8001738:	4631      	mov	r1, r6
 800173a:	e7bb      	b.n	80016b4 <_reclaim_reent+0x1c>
 800173c:	bd70      	pop	{r4, r5, r6, pc}
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c

08001744 <__libc_init_array>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	4d0d      	ldr	r5, [pc, #52]	@ (800177c <__libc_init_array+0x38>)
 8001748:	4c0d      	ldr	r4, [pc, #52]	@ (8001780 <__libc_init_array+0x3c>)
 800174a:	1b64      	subs	r4, r4, r5
 800174c:	10a4      	asrs	r4, r4, #2
 800174e:	2600      	movs	r6, #0
 8001750:	42a6      	cmp	r6, r4
 8001752:	d109      	bne.n	8001768 <__libc_init_array+0x24>
 8001754:	4d0b      	ldr	r5, [pc, #44]	@ (8001784 <__libc_init_array+0x40>)
 8001756:	4c0c      	ldr	r4, [pc, #48]	@ (8001788 <__libc_init_array+0x44>)
 8001758:	f000 f870 	bl	800183c <_init>
 800175c:	1b64      	subs	r4, r4, r5
 800175e:	10a4      	asrs	r4, r4, #2
 8001760:	2600      	movs	r6, #0
 8001762:	42a6      	cmp	r6, r4
 8001764:	d105      	bne.n	8001772 <__libc_init_array+0x2e>
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	f855 3b04 	ldr.w	r3, [r5], #4
 800176c:	4798      	blx	r3
 800176e:	3601      	adds	r6, #1
 8001770:	e7ee      	b.n	8001750 <__libc_init_array+0xc>
 8001772:	f855 3b04 	ldr.w	r3, [r5], #4
 8001776:	4798      	blx	r3
 8001778:	3601      	adds	r6, #1
 800177a:	e7f2      	b.n	8001762 <__libc_init_array+0x1e>
 800177c:	08001868 	.word	0x08001868
 8001780:	08001868 	.word	0x08001868
 8001784:	08001868 	.word	0x08001868
 8001788:	0800186c 	.word	0x0800186c

0800178c <__retarget_lock_acquire_recursive>:
 800178c:	4770      	bx	lr

0800178e <__retarget_lock_release_recursive>:
 800178e:	4770      	bx	lr

08001790 <_free_r>:
 8001790:	b538      	push	{r3, r4, r5, lr}
 8001792:	4605      	mov	r5, r0
 8001794:	2900      	cmp	r1, #0
 8001796:	d041      	beq.n	800181c <_free_r+0x8c>
 8001798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800179c:	1f0c      	subs	r4, r1, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bfb8      	it	lt
 80017a2:	18e4      	addlt	r4, r4, r3
 80017a4:	f000 f83e 	bl	8001824 <__malloc_lock>
 80017a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <_free_r+0x90>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	b933      	cbnz	r3, 80017bc <_free_r+0x2c>
 80017ae:	6063      	str	r3, [r4, #4]
 80017b0:	6014      	str	r4, [r2, #0]
 80017b2:	4628      	mov	r0, r5
 80017b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b8:	f000 b83a 	b.w	8001830 <__malloc_unlock>
 80017bc:	42a3      	cmp	r3, r4
 80017be:	d908      	bls.n	80017d2 <_free_r+0x42>
 80017c0:	6820      	ldr	r0, [r4, #0]
 80017c2:	1821      	adds	r1, r4, r0
 80017c4:	428b      	cmp	r3, r1
 80017c6:	bf01      	itttt	eq
 80017c8:	6819      	ldreq	r1, [r3, #0]
 80017ca:	685b      	ldreq	r3, [r3, #4]
 80017cc:	1809      	addeq	r1, r1, r0
 80017ce:	6021      	streq	r1, [r4, #0]
 80017d0:	e7ed      	b.n	80017ae <_free_r+0x1e>
 80017d2:	461a      	mov	r2, r3
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	b10b      	cbz	r3, 80017dc <_free_r+0x4c>
 80017d8:	42a3      	cmp	r3, r4
 80017da:	d9fa      	bls.n	80017d2 <_free_r+0x42>
 80017dc:	6811      	ldr	r1, [r2, #0]
 80017de:	1850      	adds	r0, r2, r1
 80017e0:	42a0      	cmp	r0, r4
 80017e2:	d10b      	bne.n	80017fc <_free_r+0x6c>
 80017e4:	6820      	ldr	r0, [r4, #0]
 80017e6:	4401      	add	r1, r0
 80017e8:	1850      	adds	r0, r2, r1
 80017ea:	4283      	cmp	r3, r0
 80017ec:	6011      	str	r1, [r2, #0]
 80017ee:	d1e0      	bne.n	80017b2 <_free_r+0x22>
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	6053      	str	r3, [r2, #4]
 80017f6:	4408      	add	r0, r1
 80017f8:	6010      	str	r0, [r2, #0]
 80017fa:	e7da      	b.n	80017b2 <_free_r+0x22>
 80017fc:	d902      	bls.n	8001804 <_free_r+0x74>
 80017fe:	230c      	movs	r3, #12
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	e7d6      	b.n	80017b2 <_free_r+0x22>
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	1821      	adds	r1, r4, r0
 8001808:	428b      	cmp	r3, r1
 800180a:	bf04      	itt	eq
 800180c:	6819      	ldreq	r1, [r3, #0]
 800180e:	685b      	ldreq	r3, [r3, #4]
 8001810:	6063      	str	r3, [r4, #4]
 8001812:	bf04      	itt	eq
 8001814:	1809      	addeq	r1, r1, r0
 8001816:	6021      	streq	r1, [r4, #0]
 8001818:	6054      	str	r4, [r2, #4]
 800181a:	e7ca      	b.n	80017b2 <_free_r+0x22>
 800181c:	bd38      	pop	{r3, r4, r5, pc}
 800181e:	bf00      	nop
 8001820:	20003f08 	.word	0x20003f08

08001824 <__malloc_lock>:
 8001824:	4801      	ldr	r0, [pc, #4]	@ (800182c <__malloc_lock+0x8>)
 8001826:	f7ff bfb1 	b.w	800178c <__retarget_lock_acquire_recursive>
 800182a:	bf00      	nop
 800182c:	20003f04 	.word	0x20003f04

08001830 <__malloc_unlock>:
 8001830:	4801      	ldr	r0, [pc, #4]	@ (8001838 <__malloc_unlock+0x8>)
 8001832:	f7ff bfac 	b.w	800178e <__retarget_lock_release_recursive>
 8001836:	bf00      	nop
 8001838:	20003f04 	.word	0x20003f04

0800183c <_init>:
 800183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183e:	bf00      	nop
 8001840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001842:	bc08      	pop	{r3}
 8001844:	469e      	mov	lr, r3
 8001846:	4770      	bx	lr

08001848 <_fini>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	bf00      	nop
 800184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	469e      	mov	lr, r3
 8001852:	4770      	bx	lr
